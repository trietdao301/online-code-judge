/*
 * API
 *
 * Generated by genpjrpc: v0.5.0
 *
 * API version: v0.0.0-unknown
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package main

import (
	"log"

	// WARNING!
	// Change this to a fully-qualified import path
	// once you place this file into your project.
	// For example,
	//
	//    sw "github.com/myname/myrepo/go"
	//

	"example/server/configs"
	"example/server/db"
	"example/server/handlers"
	"example/server/logic"
	"example/server/utils"
)

func main() {
	config, err := configs.NewConfig("")
	if err != nil {
		log.Fatal(err)
	}
	mongoClient, context, cancleFunc := db.SetupMongoDB()

	logger := utils.InitLogger()
	docker, err := utils.InitializeDockerClient()
	if err != nil {
		logger.Error(err.Error())
	}

	defer db.CloseConnection(mongoClient, context, cancleFunc)
	testCaseDataCollection := mongoClient.Database(config.Database.Name).Collection(config.Database.MongoCollection.TestCase)
	testCaseDataAccessor, err := db.NewTestCaseDataAccessor(testCaseDataCollection, logger)
	if err != nil {
		logger.Error(err.Error())
	}
	submissionDataCollection := mongoClient.Database(config.Database.Name).Collection(config.Database.MongoCollection.Submission)
	submissionDataAccessor, err := db.NewSubmissionDataAccessor(submissionDataCollection, logger)
	if err != nil {
		logger.Error(err.Error())
	}
	problemDataCollection := mongoClient.Database(config.Database.Name).Collection(config.Database.MongoCollection.Problem)
	problemDataAccessor, err := db.NewProblemDataAccessor(problemDataCollection, logger)
	if err != nil {
		logger.Error("fail to create problem data accessor")
	}
	submissionSnippetDataCollection := mongoClient.Database(config.Database.Name).Collection(config.Database.MongoCollection.SubmissionSnippet)
	submissionSnippetDataAccessor := db.NewSubmissionSnippetDataAccessor(submissionSnippetDataCollection, logger)

	accountDataCollection := mongoClient.Database(config.Database.Name).Collection(config.Database.MongoCollection.Account)
	accountDataAccessor, err := db.NewAccountDataAccessor(accountDataCollection, logger)
	if err != nil {
		logger.Error("fail to create account data accessor")
	}

	problemLogic := logic.NewProblemLogic(logger, problemDataAccessor, testCaseDataAccessor, submissionSnippetDataAccessor)
	testCaseLogic := logic.NewTestCaseLogic(testCaseDataAccessor, problemDataAccessor, logger)
	judgeConfig := &config.Logic.Judge
	judge, err := logic.NewJudgeLogic(logger, mongoClient, docker, judgeConfig, submissionDataAccessor, testCaseDataAccessor, problemDataAccessor)
	if err != nil {
		logger.Error(err.Error())
	}
	submissionLogic := logic.NewSubmissionLogic(judge, logger, mongoClient, submissionDataAccessor)
	submissionSnippetLogic := logic.NewSubmissionSnippetLogic(logger, submissionSnippetDataAccessor, problemDataAccessor)
	testCaseAndSubmissionSnippetLogic := logic.NewTestCaseAndSubmissionSnippetLogic(logger, problemDataAccessor, testCaseDataAccessor, submissionSnippetDataAccessor)
	tokenLogic, err := logic.NewTokenLogic(logger, accountDataAccessor, config.Token)
	if err != nil {
		logger.Error(err.Error())
	}
	accountLogic := logic.NewAccountLogic(logger, accountDataAccessor, tokenLogic)

	server := handlers.NewAPIServerHandler(
		submissionLogic,
		testCaseLogic,
		config,
		problemLogic,
		submissionSnippetLogic,
		testCaseAndSubmissionSnippetLogic,
		accountLogic,
		tokenLogic,
		logger,
	)
	server.Start()
}
